<#@ assembly name="System.Core"
#><#@ assembly name="System.Data"
#><#@ assembly name="System.Data.Linq"
#><#@ assembly name="EnvDTE"
#><#@ assembly name="System.Xml"
#><#@ assembly name="System.Xml.Linq"
#><#@ import namespace="System.Data"
#><#@ import namespace="System.Data.SqlClient"
#><#@ import namespace="System.Collections.Generic"
#><#@ import namespace="System.Linq"
#><#@ import namespace="System.IO"
#><#@ import namespace="System.Text"
#><#@ import namespace="Microsoft.VisualStudio.TextTemplating"
#><#+
// https://raw.github.com/damieng/DamienGKit
// http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
        public bool IncludeInDefault;
    }

    private Block currentBlock;
    private readonly List<Block> files = new List<Block>();
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly ITextTemplatingEngineHost host;
    private readonly StringBuilder template;
    protected readonly List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter(bool includeInDefault = true) {
        CurrentBlock = footer;
        footer.IncludeInDefault = includeInDefault;
    }

    public void StartHeader(bool includeInDefault = true) {
        CurrentBlock = header;
        header.IncludeInDefault = includeInDefault;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split, bool sync = true) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            if (!footer.IncludeInDefault)
                template.Remove(footer.Start, footer.Length);
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
            if (!header.IncludeInDefault)
                template.Remove(header.Start, header.Length);
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private readonly EnvDTE.ProjectItem templateProjectItem;
        private readonly EnvDTE.DTE dte;
        private readonly Action<String> checkOutAction;
        private readonly Action<List<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split, bool sync) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split, sync);
            if (sync)
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider)host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, List<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]) + ".";
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.FileNames[0], projectItem);

            // Remove unused items from the project
            foreach (var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach(String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
} 
public static DataTable GetReferencesTable(string table){
	string connectionString = @"Server=localhost;Database=DMP_Wescola;Trusted_Connection=True;";
	using (SqlConnection sqlConnection = new SqlConnection(connectionString))
    {
		var command = new SqlCommand("sp_fkeys", sqlConnection);
        sqlConnection.Open();
		var dtReferences = new DataTable();
		using (var a = new SqlDataAdapter(command))
		{
			a.SelectCommand.CommandType = CommandType.StoredProcedure;
			a.SelectCommand.Parameters.Add(new SqlParameter("@pktable_name", SqlDbType.VarChar, 100));
			a.Fill(dtReferences);
		}
		
		return dtReferences;
    }
}
public static DataTable GetColumns(string table)
{
    string connectionString = @"Server=localhost;Database=DMP_Wescola;Trusted_Connection=True;";

    using (SqlConnection sqlConnection = new SqlConnection(connectionString))
    {
		var commandSql = "Select replace(COLUMN_NAME, '_', '') as COLUMN_NAME, ";
		commandSql += " DATA_TYPE, ";
		commandSql += " substring(COLUMN_NAME,1,1) + lower(substring(COLUMN_NAME,2,len(COLUMN_NAME) + 1)) as ColumnLower, ";
		commandSql += " case when DATA_TYPE = 'varchar' then 'string' else case when DATA_TYPE = 'datetime' then 'DateTime' else DATA_TYPE END ";
		commandSql += " END ColumnType, ";
		commandSql += " isnull(CHARACTER_MAXIMUM_LENGTH,0) AS MAX_LEN, ";
		commandSql += " 'public ' + case when DATA_TYPE = 'varchar' then 'string' else case when DATA_TYPE = 'datetime' Or DATA_TYPE = 'time' then 'DateTime' else case when DATA_TYPE = 'money' then 'decimal' else ";
		commandSql += " DATA_TYPE END END ";
		commandSql += " END + ' ' + substring(replace(COLUMN_NAME, '_', ''),1,1) + lower(substring(replace(COLUMN_NAME, '_', ''),2,len(replace(COLUMN_NAME, '_', '')) + 1)) + ' { get; set; }' as Prop ";
		commandSql += " FROM INFORMATION_SCHEMA.COLUMNS  WHERE TABLE_NAME = N'"+table+"'";

		var command = new SqlCommand(commandSql, sqlConnection);
        sqlConnection.Open();
		var dtColumns = new DataTable();
		using (var a = new SqlDataAdapter(command))
		{
			a.Fill(dtColumns);
		}
		
		return dtColumns;
    }
}


public static IDictionary<String,String> GetColumns(string table, bool validName)
{
    string connectionString = @"Server=localhost;Database=DMP_Wescola;Trusted_Connection=True;";

    var columns = new Dictionary<String,String>();
    using (SqlConnection sqlConnection = new SqlConnection(connectionString))
    {
		var sqlComand = string.Format("SELECT replace(COLUMN_NAME, '_', ' ') as COLUMN_NAME, DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{0}'", table);
        if (validName)
			sqlComand += " And COLUMN_NAME like '%Name%'";

        SqlCommand command = new SqlCommand(sqlComand, sqlConnection);
        sqlConnection.Open();

        var reader = command.ExecuteReader();
        while (reader.Read())
        {
            columns.Add(reader.GetString(0),reader.GetString(1));
        }
    }

    return columns;
}
public static List<String> GetTables()
{
    string connectionString = @"Server=localhost;Database=DMP_Wescola;Trusted_Connection=True;";

    List<String> tables = new List<String>();
    using (SqlConnection sqlConnection = new SqlConnection(connectionString))
    {
        SqlCommand command = new SqlCommand("select TABLE_NAME from INFORMATION_SCHEMA.TABLES Where TABLE_TYPE = 'BASE TABLE'", sqlConnection);
        sqlConnection.Open();

        var reader = command.ExecuteReader();
        while (reader.Read())
        {
            tables.Add(reader.GetString(0));
        }
    }

    return tables.ToList();
}
#>